<!-- 
===============================================================================
Copyright: Copyright 2008-2011 GeoTelematic Solutions, Inc.
Project  : OpenGTS - Open GPS Tracking System
URL      : http://www.opengts.org
File     : build.xml
===============================================================================
-->

<project name="OpenGTS Java Server" default="help" basedir=".">

  <!-- Build properties -->
  <property environment="Env"/>
  <property file="build.properties"/>

  <!-- optional source -->
  <available file="${src.gts}/org/opengts/opt/StartupInit.java" type="file" property="exists.optional"/>
  <available file="${src.gts}/org/opengts/util/ExcelTools.java" type="file" property="exists.exceltools"/>
  <!-- <available file="${war.home}/download" type="dir" property="exists.download"/> -->

  <!-- Server jar classpath -->
  <property name="Server_Jar_Classpath" value="gtsutils.jar gtsdb.jar ruledb.jar bcrossdb.jar optdb.jar custom.jar"/>

  <!-- jar classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}"/>
    <fileset dir="${build.lib}">
        <include name="*.jar"/>
    </fileset>
  </path>

  <!-- war classpath -->
  <path id="compile.war.classpath">
    <pathelement location="${build.home}"/>
    <fileset dir="${build.lib}">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${lib.home}">
        <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}"> 
        <!-- Tomcat 5.5.XX -->
        <include name="common/lib/*.jar"/>
        <!-- Tomcat 6.0.XX -->
        <include name="lib/*.jar"/>
    </fileset>
  </path>
  
  <!-- ======================================================================== -->
  <!-- ======================================================================== -->
  <!-- Target: tomcat "${catalina.home}" -->
  <target name="tomcat.env" depends="tomcat.home"
    description="Check for Tomcat environment variables"/>

  <!-- Target: tomcat "${catalina.home}" -->
  <target name="tomcat.home" 
    description="Check for CATALINA_HOME environment variable">
    <fail unless="Env.CATALINA_HOME">
        CATALINA_HOME environment variable has not been defined.
        (make sure CATALINA_HOME is defined and exported to the list of environment variables)
    </fail>
    <echo message="'CATALINA_HOME' is defined - ${Env.CATALINA_HOME}"/>
  </target>

  <!-- Target: tomcat.base "${catalina.base}" -->
  <target name="tomcat.base" 
    description="Check for CATALINA_BASE environment variable">
    <fail unless="Env.CATALINA_BASE">
        CATALINA_BASE environment variable has not been defined.
        (make sure CATALINA_BASE is defined and exported to the list of environment variables)
    </fail>
    <echo message="'CATALINA_BASE' is defined - ${Env.CATALINA_BASE}"/>
  </target>

  <!-- Target: tomcat.shexe "${catalina.base}" -->
  <target name="tomcat.shexe" depends="tomcat.sh_exe"/>
  <target name="tomcat.sh_exe" 
    description="Make Tomcat $CATALINA_HOME/bin/*.sh files executable">
    <fail unless="Env.CATALINA_HOME">
        CATALINA_HOME environment variable has not been defined.
        (make sure CATALINA_HOME is defined and exported to the list of environment variables)
    </fail>
    <chmod dir="${Env.CATALINA_HOME}/bin" perm="a+x" includes="*.sh"/>
    <echo message="'$CATALINA_HOME/bin/*.sh' files should now be executable"/>
  </target>
 
  <!-- ======================================================================== -->
  <!-- Target: 'checkInstall' -->
  <target name="checkInstall"
    description="Run 'checkInstall'">
    <echo message="OS = ${os.name}"/>
    <exec executable="bin/checkInstall.sh"  dir="${tools.home}" os="Linux, Mac OS X"/>
    <exec executable="bin/checkInstall.bat" dir="${tools.home}" os="Windows"/>
  </target>

 

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module example template -->
  <target name="template" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' template ...">
    <echo message="template ..."/>

    <!-- compile template -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/template/**/*.java"/>
    </javac>

    <!-- create template.jar server -->
    <jar jarfile="${build.lib}/template.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.template.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/template/**/*.class"/>
        </fileset>
    </jar>

  </target>

   <!-- ======================================================================== -->

  <!-- Target: prepare (create build directories) -->
  <target name="prepare" 
    description="Prepare for compile">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.lib}"/>
    <property name="compile.classpath" refid="compile.classpath"/>
    <echo message="OS = ${os.name}"/>
    <echo message="JavaHome = ${java.home}"/>

    <!-- display Java version "java -version" on stdout -->
    <exec executable="java" dir="${java.home}" failonerror="true">
        <arg value="-version"/>
    </exec>

    <!-- copy 'war' files to build directory "build/" -->
    <copy todir="${build.home}" failonerror="false" verbose="false">
        <fileset dir="${basedir}/lib/gtsopt">
           <include name="*.war"/>
        </fileset>
    </copy>

    <!-- copy '.class' files to build directory "build/" -->
    <echo message="(Ignore copy 'not found' warnings)"/>
    <copy todir="${build.home}" failonerror="false" verbose="false">
        <!-- ok if this directory does not exist -->
        <fileset dir="${basedir}/lib/gtsopt/classes">
           <include name="*.class"/>
        </fileset>
    </copy>

    <!-- copy JavaMail support jars build directory -->
    <mkdir dir="${basedir}/jlib/javamail"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/javamail">
           <include name="activation.jar"/> <!-- not needed for JDK 6+ -->
           <include name="mail.jar"/>
        </fileset>
    </copy>

    <!-- copy Apache Derby support jars build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.derby"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.derby">
           <include name="*.jar"/>
        </fileset>
    </copy>

    <!-- copy Microsoft SQL Server support jars build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.sqlserver"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.sqlserver">
           <include name="*.jar"/>
        </fileset>
    </copy>

    <!-- copy MySQL support to build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.mysql"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.mysql">
           <include name="mysql-connector-java-3.1.7-bin.jar"/>
        </fileset>
    </copy>

    <!-- copy Apache support to build directory -->
    <mkdir dir="${basedir}/jlib/apache"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/apache">
           <include name="*.jar"/>
        </fileset>
    </copy>

  </target>


  <!-- ======================================================================== -->
  
  <target name="gtsdb" depends="prepare,gtsutils,CompileTime.java"
    description="Create 'gtsdb.jar'">

    <!-- compile GTS db -->
    <echo message="Creating gtsdb.jar ..."/>
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        encoding="UTF-8"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <!-- <compilerarg value="-Xlint:unchecked"/> -->
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/*.java"/>
        <include name="org/opengts/geocoder/**/*.java"/>
        <!-- exclude name="org/opengts/geocoder/nominatim/*.java"/ -->
        <include name="org/opengts/dbtypes/**/*.java"/>
        <include name="org/opengts/db/**/*.java"/>
        <include name="org/opengts/extra/tables/**/*.java"/>
        <include name="org/opengts/extra/rule/**/*.java"/>
        <include name="org/opengts/extra/service/**/*.java"/>
        <include name="org/opengts/extra/geocoder/geoinverso/*.java"/>
    </javac>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/*.properties"/>
            <include name="org/opengts/geocoder/**/*.properties"/>
            <include name="org/opengts/dbtypes/**/*.properties"/>
            <include name="org/opengts/db/**/*.properties"/>
            <include name="org/opengts/extra/tables/**/*.properties"/>
            <include name="org/opengts/extra/rule/**/*.properties"/>
            <include name="org/opengts/extra/service/**/*.properties"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.properties"/>
        </fileset>
    </copy>

    <!-- create gtsdb.jar file -->
    <jar jarfile="${build.lib}/gtsdb.jar">
        <fileset dir="${build.home}">
            <!-- class files -->
            <include name="org/opengts/*.class"/>
            <include name="org/opengts/geocoder/**/*.class"/>
            <include name="org/opengts/dbtypes/**/*.class"/>
            <include name="org/opengts/db/**/*.class"/>
            <include name="org/opengts/extra/tables/**/*.class"/>
            <include name="org/opengts/extra/rule/**/*.class"/>
            <include name="org/opengts/extra/service/**/*.class"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.class"/>
            <!-- property files -->
            <include name="org/opengts/*.properties"/>
            <include name="org/opengts/geocoder/**/*.properties"/>
            <include name="org/opengts/dbtypes/**/*.properties"/>
            <include name="org/opengts/db/**/*.properties"/>
            <include name="org/opengts/extra/tables/**/*.properties"/>
            <include name="org/opengts/extra/rule/**/*.properties"/>
            <include name="org/opengts/extra/service/**/*.properties"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.properties"/>
        </fileset>
    </jar>

    <!-- create version script file -->
    <copy todir="${build.lib}" verbose="false">
        <fileset dir="${basedir}/bin">
           <include name="gtsdb.sh"/>
        </fileset>
    </copy>
    <chmod file="${build.lib}/gtsdb.sh" perm="a+x"/>

  </target>
  
  
  <!-- ======================================================================== -->

  <!-- Target: CompileTime.java -->
  <target name="CompileTime.java"
    description="Create CompileTime.java">

    <!-- (re)create compile time source file here? -->
    <echo message="Creating CompileTime module ..."/>
    <java classname="org.opengts.util.CompiletimeVars" fork="true" failonerror="true">
        <arg value="-configFileDir=${basedir}"/>
        <arg value="-template?=${basedir}/CompileTime.jtemp"/>
        <arg value="-package=org.opengts"/>
        <arg value="-output=${src.gts}/org/opengts/CompileTime.java"/>
        <arg value="-overwrite=true"/>
        <arg value="-extra=${CompiletimeVars.extra}"/>
        <arg value="${CompiletimeVars.arg}"/>
        <arg value="${CompiletimeVars.arg.1}"/>
        <arg value="${CompiletimeVars.arg.2}"/>
        <arg value="${CompiletimeVars.arg.3}"/>
        <classpath>
            <pathelement location="${build.lib}/gtsutils.jar"/>
        </classpath>
    </java>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: gtsutils.jar -->
  <target name="gtsutils" depends="gtsutils.jar"/>
  
  <!-- Target: gtsutils.optional -->
  <target name="gtsutils.optional" if="exists.exceltools" depends="prepare"
    description="Compile 'gtsutils.jar' optional components">
    <echo message="Compiling gtsutils.jar optional source ... "/>

    <!-- compile "ExcelTools.java" -->
    <!-- (continue if this compile fails) -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        failonerror="false">
        <compilerarg line="-Xmaxerrs 1"/> <!-- "-Xmaxerrs 0" invokes a compiler bug -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/ExcelTools.java"/>
    </javac>
    <echo message="* Ignore any compile error that may be displayed above ..."/>
    <!-- -->

  </target>

  <!-- ======================================================================== -->

  <!-- Target: gtsutils.compile -->
  <target name="gtsutils.compile" depends="prepare"
    description="Compile 'gtsutils.jar' components">
    <echo message="Compiling gtsutils.jar source ... "/>

    <!--
<echo message="Ignore any &quot;sun.reflect.Reflection&quot; warnings that may be displayed"/>
-->

    <!-- compile GTS utils (sans "SendMailArgs.java", "ExcelTools.java") -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <!-- the utils dir has known unchecked warnings (ie. anything with "newInstance" etc) -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/**/*.java"/>
        <exclude name="org/opengts/util/SendMailArgs.java"/>
        <exclude name="org/opengts/util/ExcelTools.java"/>
        <include name="org/opengts/cellid/**/*.java"/>
        <include name="org/opengts/google/**/*.java"/>
        <include name="org/opengts/extra/util/**/*.java"/>
        <include name="org/opengts/extra/cellid/**/*.java"/>
        <include name="org/opengts/extra/shapefile/**/*.java"/>
    </javac>

    <!-- compile "SendMailArgs.java" -->
    <!-- (continue if this compile fails) -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        failonerror="false">
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/SendMailArgs.java"/>
    </javac>
    <!-- -->

    <!-- compile GTS dbtools -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <!-- the dbtools dir has known unchecked warnings (ie. DBRecordIterator.java) -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/dbtools/**/*.java"/>
        <include name="org/opengts/extra/dbtools/**/*.java"/>
    </javac>

  </target>
  
  <!-- ======================================================================== -->

  <!-- Target: gtsutils.jar -->
  <target name="gtsutils.jar" depends="prepare,gtsutils.compile,gtsutils.optional"
    description="Create 'gtsutils.jar'">
    <echo message="Creating gtsutils.jar ... "/>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/util/**/*.properties"/>
            <include name="org/opengts/cellid/**/*.properties"/>
            <include name="org/opengts/google/**/*.properties"/>
            <include name="org/opengts/extra/util/**/*.properties"/>
            <include name="org/opengts/extra/cellid/**/*.properties"/>
            <include name="org/opengts/extra/shapefile/**/*.properties"/>
             <!-- -->
            <include name="org/opengts/dbtools/**/*.properties"/>
            <include name="org/opengts/extra/dbtools/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create gtsutils.jar file -->
    <jar jarfile="${build.lib}/gtsutils.jar">
        <fileset dir="${build.home}">
           <!-- class files -->
            <include name="org/opengts/util/**/*.class"/>
            <include name="org/opengts/cellid/**/*.class"/>
            <include name="org/opengts/google/**/*.class"/>
            <include name="org/opengts/extra/util/**/*.class"/>
            <include name="org/opengts/extra/cellid/**/*.class"/>
            <include name="org/opengts/extra/shapefile/**/*.class"/>
             <!-- -->
            <include name="org/opengts/dbtools/**/*.class"/>
            <include name="org/opengts/extra/dbtools/**/*.class"/>
           <!-- property files -->
            <include name="org/opengts/util/**/*.properties"/>
            <include name="org/opengts/cellid/**/*.properties"/>
            <include name="org/opengts/google/**/*.properties"/>
            <include name="org/opengts/extra/util/**/*.properties"/>
            <include name="org/opengts/extra/cellid/**/*.properties"/>
            <include name="org/opengts/extra/shapefile/**/*.properties"/>
             <!-- -->
            <include name="org/opengts/dbtools/**/*.properties"/>
            <include name="org/opengts/extra/dbtools/**/*.properties"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->
  <!-- Custom build scripts -->
  <import file="build_custom.xml"       optional="false"/>  <!-- required -->
  <!-- ======================================================================== -->

  <!-- ======================================================================== -->
  <!-- optional GTSE build scripts -->
  <import file="build_rulewar.xml"      optional="true"/>
  <import file="build_ctracfree.xml"    optional="true"/>
  <!-- ======================================================================== -->

  <!-- ======================================================================== -->
  <!-- private build scripts -->
  <import file="build_rule.xml"         optional="true"/>
  <import file="build_servers.xml"      optional="true"/>
  <import file="build_generic.xml"      optional="true"/>
  <import file="build_sanav.xml"        optional="true"/>
  <import file="build_celltrac.xml"     optional="true"/>
  <import file="build_intellitrac.xml"  optional="true"/>
  <import file="build_gsspot.xml"       optional="true"/>
  <import file="build_axonn.xml"        optional="true"/>
  <import file="build_squarell.xml"     optional="true"/>
  <import file="build_optui.xml"        optional="true"/>
  <import file="build_bcross.xml"       optional="true"/>
  <import file="build_opt.xml"          optional="true"/>
  <import file="build_private.xml"      optional="true"/>
  <!-- ======================================================================== -->
 
  <!-- ======================================================================== -->

</project>
